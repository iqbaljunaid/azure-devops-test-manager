name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for setuptools_scm

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .[test,dev]

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      - name: Format check with black
        run: |
          black --check --exclude "_version\.py|generated" --diff src/ tests/

      - name: Type check with mypy
        run: |
          mypy src/ --ignore-missing-imports

      - name: Test with pytest
        run: |
          python -m pytest tests/ -v --cov=azure_devops_test_manager --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.10'
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for setuptools_scm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          python -m twine check dist/*

      - name: Test installation
        run: |
          pip install dist/*.whl
          azure-devops-test-manager --version
          ado-test-manager --version
